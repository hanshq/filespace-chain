// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: filespacechain/filespacechain/query.proto

package filespacechain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                  = "/filespacechain.filespacechain.Query/Params"
	Query_FileEntry_FullMethodName               = "/filespacechain.filespacechain.Query/FileEntry"
	Query_FileEntryAll_FullMethodName            = "/filespacechain.filespacechain.Query/FileEntryAll"
	Query_HostingInquiry_FullMethodName          = "/filespacechain.filespacechain.Query/HostingInquiry"
	Query_HostingInquiryAll_FullMethodName       = "/filespacechain.filespacechain.Query/HostingInquiryAll"
	Query_HostingContract_FullMethodName         = "/filespacechain.filespacechain.Query/HostingContract"
	Query_HostingContractAll_FullMethodName      = "/filespacechain.filespacechain.Query/HostingContractAll"
	Query_HostingOffer_FullMethodName            = "/filespacechain.filespacechain.Query/HostingOffer"
	Query_HostingOfferAll_FullMethodName         = "/filespacechain.filespacechain.Query/HostingOfferAll"
	Query_ListHostingContractFrom_FullMethodName = "/filespacechain.filespacechain.Query/ListHostingContractFrom"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of FileEntry items.
	FileEntry(ctx context.Context, in *QueryGetFileEntryRequest, opts ...grpc.CallOption) (*QueryGetFileEntryResponse, error)
	FileEntryAll(ctx context.Context, in *QueryAllFileEntryRequest, opts ...grpc.CallOption) (*QueryAllFileEntryResponse, error)
	// Queries a list of HostingInquiry items.
	HostingInquiry(ctx context.Context, in *QueryGetHostingInquiryRequest, opts ...grpc.CallOption) (*QueryGetHostingInquiryResponse, error)
	HostingInquiryAll(ctx context.Context, in *QueryAllHostingInquiryRequest, opts ...grpc.CallOption) (*QueryAllHostingInquiryResponse, error)
	// Queries a list of HostingContract items.
	HostingContract(ctx context.Context, in *QueryGetHostingContractRequest, opts ...grpc.CallOption) (*QueryGetHostingContractResponse, error)
	HostingContractAll(ctx context.Context, in *QueryAllHostingContractRequest, opts ...grpc.CallOption) (*QueryAllHostingContractResponse, error)
	// Queries a list of HostingOffer items.
	HostingOffer(ctx context.Context, in *QueryGetHostingOfferRequest, opts ...grpc.CallOption) (*QueryGetHostingOfferResponse, error)
	HostingOfferAll(ctx context.Context, in *QueryAllHostingOfferRequest, opts ...grpc.CallOption) (*QueryAllHostingOfferResponse, error)
	// Queries a list of ListHostingContractFrom items.
	ListHostingContractFrom(ctx context.Context, in *QueryListHostingContractFromRequest, opts ...grpc.CallOption) (*QueryListHostingContractFromResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileEntry(ctx context.Context, in *QueryGetFileEntryRequest, opts ...grpc.CallOption) (*QueryGetFileEntryResponse, error) {
	out := new(QueryGetFileEntryResponse)
	err := c.cc.Invoke(ctx, Query_FileEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileEntryAll(ctx context.Context, in *QueryAllFileEntryRequest, opts ...grpc.CallOption) (*QueryAllFileEntryResponse, error) {
	out := new(QueryAllFileEntryResponse)
	err := c.cc.Invoke(ctx, Query_FileEntryAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingInquiry(ctx context.Context, in *QueryGetHostingInquiryRequest, opts ...grpc.CallOption) (*QueryGetHostingInquiryResponse, error) {
	out := new(QueryGetHostingInquiryResponse)
	err := c.cc.Invoke(ctx, Query_HostingInquiry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingInquiryAll(ctx context.Context, in *QueryAllHostingInquiryRequest, opts ...grpc.CallOption) (*QueryAllHostingInquiryResponse, error) {
	out := new(QueryAllHostingInquiryResponse)
	err := c.cc.Invoke(ctx, Query_HostingInquiryAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingContract(ctx context.Context, in *QueryGetHostingContractRequest, opts ...grpc.CallOption) (*QueryGetHostingContractResponse, error) {
	out := new(QueryGetHostingContractResponse)
	err := c.cc.Invoke(ctx, Query_HostingContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingContractAll(ctx context.Context, in *QueryAllHostingContractRequest, opts ...grpc.CallOption) (*QueryAllHostingContractResponse, error) {
	out := new(QueryAllHostingContractResponse)
	err := c.cc.Invoke(ctx, Query_HostingContractAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingOffer(ctx context.Context, in *QueryGetHostingOfferRequest, opts ...grpc.CallOption) (*QueryGetHostingOfferResponse, error) {
	out := new(QueryGetHostingOfferResponse)
	err := c.cc.Invoke(ctx, Query_HostingOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingOfferAll(ctx context.Context, in *QueryAllHostingOfferRequest, opts ...grpc.CallOption) (*QueryAllHostingOfferResponse, error) {
	out := new(QueryAllHostingOfferResponse)
	err := c.cc.Invoke(ctx, Query_HostingOfferAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListHostingContractFrom(ctx context.Context, in *QueryListHostingContractFromRequest, opts ...grpc.CallOption) (*QueryListHostingContractFromResponse, error) {
	out := new(QueryListHostingContractFromResponse)
	err := c.cc.Invoke(ctx, Query_ListHostingContractFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of FileEntry items.
	FileEntry(context.Context, *QueryGetFileEntryRequest) (*QueryGetFileEntryResponse, error)
	FileEntryAll(context.Context, *QueryAllFileEntryRequest) (*QueryAllFileEntryResponse, error)
	// Queries a list of HostingInquiry items.
	HostingInquiry(context.Context, *QueryGetHostingInquiryRequest) (*QueryGetHostingInquiryResponse, error)
	HostingInquiryAll(context.Context, *QueryAllHostingInquiryRequest) (*QueryAllHostingInquiryResponse, error)
	// Queries a list of HostingContract items.
	HostingContract(context.Context, *QueryGetHostingContractRequest) (*QueryGetHostingContractResponse, error)
	HostingContractAll(context.Context, *QueryAllHostingContractRequest) (*QueryAllHostingContractResponse, error)
	// Queries a list of HostingOffer items.
	HostingOffer(context.Context, *QueryGetHostingOfferRequest) (*QueryGetHostingOfferResponse, error)
	HostingOfferAll(context.Context, *QueryAllHostingOfferRequest) (*QueryAllHostingOfferResponse, error)
	// Queries a list of ListHostingContractFrom items.
	ListHostingContractFrom(context.Context, *QueryListHostingContractFromRequest) (*QueryListHostingContractFromResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) FileEntry(context.Context, *QueryGetFileEntryRequest) (*QueryGetFileEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileEntry not implemented")
}
func (UnimplementedQueryServer) FileEntryAll(context.Context, *QueryAllFileEntryRequest) (*QueryAllFileEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileEntryAll not implemented")
}
func (UnimplementedQueryServer) HostingInquiry(context.Context, *QueryGetHostingInquiryRequest) (*QueryGetHostingInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingInquiry not implemented")
}
func (UnimplementedQueryServer) HostingInquiryAll(context.Context, *QueryAllHostingInquiryRequest) (*QueryAllHostingInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingInquiryAll not implemented")
}
func (UnimplementedQueryServer) HostingContract(context.Context, *QueryGetHostingContractRequest) (*QueryGetHostingContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingContract not implemented")
}
func (UnimplementedQueryServer) HostingContractAll(context.Context, *QueryAllHostingContractRequest) (*QueryAllHostingContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingContractAll not implemented")
}
func (UnimplementedQueryServer) HostingOffer(context.Context, *QueryGetHostingOfferRequest) (*QueryGetHostingOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingOffer not implemented")
}
func (UnimplementedQueryServer) HostingOfferAll(context.Context, *QueryAllHostingOfferRequest) (*QueryAllHostingOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingOfferAll not implemented")
}
func (UnimplementedQueryServer) ListHostingContractFrom(context.Context, *QueryListHostingContractFromRequest) (*QueryListHostingContractFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostingContractFrom not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFileEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FileEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileEntry(ctx, req.(*QueryGetFileEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileEntryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFileEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileEntryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FileEntryAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileEntryAll(ctx, req.(*QueryAllFileEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingInquiry(ctx, req.(*QueryGetHostingInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingInquiryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingInquiryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingInquiryAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingInquiryAll(ctx, req.(*QueryAllHostingInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingContract(ctx, req.(*QueryGetHostingContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingContractAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingContractAll(ctx, req.(*QueryAllHostingContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingOffer(ctx, req.(*QueryGetHostingOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingOfferAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingOfferAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HostingOfferAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingOfferAll(ctx, req.(*QueryAllHostingOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListHostingContractFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListHostingContractFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListHostingContractFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListHostingContractFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListHostingContractFrom(ctx, req.(*QueryListHostingContractFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filespacechain.filespacechain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FileEntry",
			Handler:    _Query_FileEntry_Handler,
		},
		{
			MethodName: "FileEntryAll",
			Handler:    _Query_FileEntryAll_Handler,
		},
		{
			MethodName: "HostingInquiry",
			Handler:    _Query_HostingInquiry_Handler,
		},
		{
			MethodName: "HostingInquiryAll",
			Handler:    _Query_HostingInquiryAll_Handler,
		},
		{
			MethodName: "HostingContract",
			Handler:    _Query_HostingContract_Handler,
		},
		{
			MethodName: "HostingContractAll",
			Handler:    _Query_HostingContractAll_Handler,
		},
		{
			MethodName: "HostingOffer",
			Handler:    _Query_HostingOffer_Handler,
		},
		{
			MethodName: "HostingOfferAll",
			Handler:    _Query_HostingOfferAll_Handler,
		},
		{
			MethodName: "ListHostingContractFrom",
			Handler:    _Query_ListHostingContractFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filespacechain/filespacechain/query.proto",
}
