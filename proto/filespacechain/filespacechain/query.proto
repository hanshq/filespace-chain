syntax = "proto3";

package filespacechain.filespacechain;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "filespacechain/filespacechain/params.proto";
import "filespacechain/filespacechain/file_entry.proto";
import "filespacechain/filespacechain/hosting_inquiry.proto";
import "filespacechain/filespacechain/hosting_contract.proto";
import "filespacechain/filespacechain/hosting_offer.proto";
import "filespacechain/filespacechain/payment.proto";

option go_package = "github.com/hanshq/filespace-chain/x/filespacechain/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/params";
  
  }
  
  // Queries a list of FileEntry items.
  rpc FileEntry    (QueryGetFileEntryRequest) returns (QueryGetFileEntryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/file_entry/{id}";
  
  }
  rpc FileEntryAll (QueryAllFileEntryRequest) returns (QueryAllFileEntryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/file_entry";
  
  }
  
  // Queries a list of HostingInquiry items.
  rpc HostingInquiry    (QueryGetHostingInquiryRequest) returns (QueryGetHostingInquiryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_inquiry/{id}";
  
  }
  rpc HostingInquiryAll (QueryAllHostingInquiryRequest) returns (QueryAllHostingInquiryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_inquiry";
  
  }
  
  // Queries a list of HostingContract items.
  rpc HostingContract    (QueryGetHostingContractRequest) returns (QueryGetHostingContractResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_contract/{id}";
  
  }
  rpc HostingContractAll (QueryAllHostingContractRequest) returns (QueryAllHostingContractResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_contract";
  
  }
  
  // Queries a list of HostingOffer items.
  rpc HostingOffer    (QueryGetHostingOfferRequest) returns (QueryGetHostingOfferResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_offer/{id}";
  
  }
  rpc HostingOfferAll (QueryAllHostingOfferRequest) returns (QueryAllHostingOfferResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/hosting_offer";
  
  }
  
  // Queries a list of ListHostingContractFrom items.
  rpc ListHostingContractFrom (QueryListHostingContractFromRequest) returns (QueryListHostingContractFromResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/list_hosting_contract_from/{creator}";
  
  }

  // Queries payment history for a specific contract.
  rpc PaymentHistory (QueryPaymentHistoryRequest) returns (QueryPaymentHistoryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/payment_history/{contract_id}";
  }

  // Queries all payment history records.
  rpc PaymentHistoryAll (QueryAllPaymentHistoryRequest) returns (QueryAllPaymentHistoryResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/payment_history";
  }

  // Queries escrow record for a specific inquiry.
  rpc EscrowRecord (QueryEscrowRecordRequest) returns (QueryEscrowRecordResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/escrow/{inquiry_id}";
  }

  // Queries all escrow records.
  rpc EscrowRecordAll (QueryAllEscrowRecordRequest) returns (QueryAllEscrowRecordResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/escrow";
  }

  // Queries provider stake for a specific address.
  rpc ProviderStake (QueryProviderStakeRequest) returns (QueryProviderStakeResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/provider_stake/{provider}";
  }

  // Queries all provider stakes.
  rpc ProviderStakeAll (QueryAllProviderStakeRequest) returns (QueryAllProviderStakeResponse) {
    option (google.api.http).get = "/hanshq/filespace-chain/filespacechain/provider_stake";
  }

  
  
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetFileEntryRequest {
  uint64 id = 1;
}

message QueryGetFileEntryResponse {
  FileEntry FileEntry = 1 [(gogoproto.nullable) = false];
}

message QueryAllFileEntryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFileEntryResponse {
  repeated FileEntry                              FileEntry  = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetHostingInquiryRequest {
  uint64 id = 1;
}

message QueryGetHostingInquiryResponse {
  HostingInquiry HostingInquiry = 1 [(gogoproto.nullable) = false];
}

message QueryAllHostingInquiryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllHostingInquiryResponse {
  repeated HostingInquiry                         HostingInquiry = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryGetHostingContractRequest {
  uint64 id = 1;
}

message QueryGetHostingContractResponse {
  HostingContract HostingContract = 1 [(gogoproto.nullable) = false];
}

message QueryAllHostingContractRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllHostingContractFromRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string                                from       = 2;
}

message QueryAllHostingContractResponse {
  repeated HostingContract                        HostingContract = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination      = 2;
}

message QueryGetHostingOfferRequest {
  uint64 id = 1;
}

message QueryGetHostingOfferResponse {
  HostingOffer HostingOffer = 1 [(gogoproto.nullable) = false];
}

message QueryAllHostingOfferRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllHostingOfferResponse {
  repeated HostingOffer                           HostingOffer = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination   = 2;
}

message QueryListHostingContractFromRequest {
  string                                creator    = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryListHostingContractFromResponse {
  repeated HostingContract                        HostingContract = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Payment History Queries
message QueryPaymentHistoryRequest {
  uint64 contract_id = 1;
}

message QueryPaymentHistoryResponse {
  PaymentHistory payment_history = 1 [(gogoproto.nullable) = false];
}

message QueryAllPaymentHistoryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPaymentHistoryResponse {
  repeated PaymentHistory                         payment_history = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Escrow Queries
message QueryEscrowRecordRequest {
  uint64 inquiry_id = 1;
}

message QueryEscrowRecordResponse {
  EscrowRecord escrow_record = 1 [(gogoproto.nullable) = false];
}

message QueryAllEscrowRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEscrowRecordResponse {
  repeated EscrowRecord                           escrow_record = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Provider Stake Queries
message QueryProviderStakeRequest {
  string provider = 1;
}

message QueryProviderStakeResponse {
  ProviderStake provider_stake = 1 [(gogoproto.nullable) = false];
}

message QueryAllProviderStakeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProviderStakeResponse {
  repeated ProviderStake                          provider_stake = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}




