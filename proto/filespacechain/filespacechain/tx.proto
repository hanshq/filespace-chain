syntax = "proto3";

package filespacechain.filespacechain;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "filespacechain/filespacechain/params.proto";
import "filespacechain/filespacechain/file_entry.proto";
import "filespacechain/filespacechain/hosting_inquiry.proto";
import "cosmos/base/v1beta1/coin.proto";
import "filespacechain/filespacechain/hosting_contract.proto";
import "filespacechain/filespacechain/hosting_offer.proto";

option go_package = "github.com/hanshq/filespace-chain/x/filespacechain/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams          (MsgUpdateParams         ) returns (MsgUpdateParamsResponse         );
  rpc CreateFileEntry       (MsgCreateFileEntry      ) returns (MsgCreateFileEntryResponse      );
  rpc UpdateFileEntry       (MsgUpdateFileEntry      ) returns (MsgUpdateFileEntryResponse      );
  rpc DeleteFileEntry       (MsgDeleteFileEntry      ) returns (MsgDeleteFileEntryResponse      );
  rpc CreateHostingInquiry  (MsgCreateHostingInquiry ) returns (MsgCreateHostingInquiryResponse );
  rpc UpdateHostingInquiry  (MsgUpdateHostingInquiry ) returns (MsgUpdateHostingInquiryResponse );
  rpc DeleteHostingInquiry  (MsgDeleteHostingInquiry ) returns (MsgDeleteHostingInquiryResponse );
  rpc CreateHostingContract (MsgCreateHostingContract) returns (MsgCreateHostingContractResponse);
  rpc UpdateHostingContract (MsgUpdateHostingContract) returns (MsgUpdateHostingContractResponse);
  rpc DeleteHostingContract (MsgDeleteHostingContract) returns (MsgDeleteHostingContractResponse);
  rpc CreateHostingOffer    (MsgCreateHostingOffer   ) returns (MsgCreateHostingOfferResponse   );
  rpc UpdateHostingOffer    (MsgUpdateHostingOffer   ) returns (MsgUpdateHostingOfferResponse   );
  rpc DeleteHostingOffer    (MsgDeleteHostingOffer   ) returns (MsgDeleteHostingOfferResponse   );
  rpc StakeForHosting       (MsgStakeForHosting      ) returns (MsgStakeForHostingResponse      );
  rpc UnstakeFromHosting    (MsgUnstakeFromHosting   ) returns (MsgUnstakeFromHostingResponse   );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                       "authority";
  option           (amino.name) = "filespacechain/x/filespacechain/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateFileEntry {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  string cid       = 2;
  string rootCid   = 3;
  string parentCid = 4;
  string metaData  = 5;
  uint64 fileSize  = 6;
}

message MsgCreateFileEntryResponse {
  uint64 id = 1;
}

message MsgUpdateFileEntry {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  uint64 id        = 2;
  string cid       = 3;
  string rootCid   = 4;
  string parentCid = 5;
  string metaData  = 6;
  uint64 fileSize  = 7;
}

message MsgUpdateFileEntryResponse {}

message MsgDeleteFileEntry {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id      = 2;
}

message MsgDeleteFileEntryResponse {}

message MsgCreateHostingInquiry {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator         = 1;
  string                   fileEntryCid    = 2;
  uint64                   replicationRate = 3;
  cosmos.base.v1beta1.Coin escrowAmount    = 4 [(gogoproto.nullable) = false];
  uint64                   endTime         = 5;
  cosmos.base.v1beta1.Coin maxPricePerBlock    = 6 [(gogoproto.nullable) = false];
}

message MsgCreateHostingInquiryResponse {
  uint64 id = 1;
}

message MsgUpdateHostingInquiry {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator         = 1;
  uint64                   id              = 2;
  string                   fileEntryCid    = 3;
  uint64                   replicationRate = 4;
  cosmos.base.v1beta1.Coin escrowAmount    = 5 [(gogoproto.nullable) = false];
  uint64                   endTime         = 6;
  cosmos.base.v1beta1.Coin maxPricePerBlock    = 7 [(gogoproto.nullable) = false];
}

message MsgUpdateHostingInquiryResponse {}

message MsgDeleteHostingInquiry {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id      = 2;
}

message MsgDeleteHostingInquiryResponse {}

message MsgCreateHostingContract {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  uint64 inquiryId = 2;
  uint64 offerId   = 3;
}

message MsgCreateHostingContractResponse {
  uint64 id = 1;
}

message MsgUpdateHostingContract {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  uint64 id        = 2;
  uint64 inquiryId = 3;
  uint64 offerId   = 4;
}

message MsgUpdateHostingContractResponse {}

message MsgDeleteHostingContract {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id      = 2;
}

message MsgDeleteHostingContractResponse {}

message MsgCreateHostingOffer {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator       = 1;
  string                   region        = 2;
  cosmos.base.v1beta1.Coin pricePerBlock = 3 [(gogoproto.nullable) = false];
}

message MsgCreateHostingOfferResponse {
  uint64 id = 1;
}

message MsgUpdateHostingOffer {
  option (cosmos.msg.v1.signer) = "creator";
  string                   creator       = 1;
  uint64                   id            = 2;
  string                   region        = 3;
  cosmos.base.v1beta1.Coin pricePerBlock = 4 [(gogoproto.nullable) = false];
}

message MsgUpdateHostingOfferResponse {}

message MsgDeleteHostingOffer {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 id      = 2;
}

message MsgDeleteHostingOfferResponse {}

message MsgStakeForHosting {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgStakeForHostingResponse {}

message MsgUnstakeFromHosting {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgUnstakeFromHostingResponse {}

