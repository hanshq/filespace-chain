// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filespacechain/filespacechain/payment.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PaymentHistory struct {
	ContractId          uint64     `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	TotalPaid           types.Coin `protobuf:"bytes,2,opt,name=total_paid,json=totalPaid,proto3" json:"total_paid"`
	LastPaymentBlock    uint64     `protobuf:"varint,3,opt,name=last_payment_block,json=lastPaymentBlock,proto3" json:"last_payment_block,omitempty"`
	CompletionBonusPaid bool       `protobuf:"varint,4,opt,name=completion_bonus_paid,json=completionBonusPaid,proto3" json:"completion_bonus_paid,omitempty"`
}

func (m *PaymentHistory) Reset()         { *m = PaymentHistory{} }
func (m *PaymentHistory) String() string { return proto.CompactTextString(m) }
func (*PaymentHistory) ProtoMessage()    {}
func (*PaymentHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe96bcb3c73d2a9, []int{0}
}
func (m *PaymentHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentHistory.Merge(m, src)
}
func (m *PaymentHistory) XXX_Size() int {
	return m.Size()
}
func (m *PaymentHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentHistory.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentHistory proto.InternalMessageInfo

func (m *PaymentHistory) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *PaymentHistory) GetTotalPaid() types.Coin {
	if m != nil {
		return m.TotalPaid
	}
	return types.Coin{}
}

func (m *PaymentHistory) GetLastPaymentBlock() uint64 {
	if m != nil {
		return m.LastPaymentBlock
	}
	return 0
}

func (m *PaymentHistory) GetCompletionBonusPaid() bool {
	if m != nil {
		return m.CompletionBonusPaid
	}
	return false
}

type EscrowRecord struct {
	InquiryId uint64     `protobuf:"varint,1,opt,name=inquiry_id,json=inquiryId,proto3" json:"inquiry_id,omitempty"`
	Amount    types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Creator   string     `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EscrowRecord) Reset()         { *m = EscrowRecord{} }
func (m *EscrowRecord) String() string { return proto.CompactTextString(m) }
func (*EscrowRecord) ProtoMessage()    {}
func (*EscrowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe96bcb3c73d2a9, []int{1}
}
func (m *EscrowRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowRecord.Merge(m, src)
}
func (m *EscrowRecord) XXX_Size() int {
	return m.Size()
}
func (m *EscrowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowRecord proto.InternalMessageInfo

func (m *EscrowRecord) GetInquiryId() uint64 {
	if m != nil {
		return m.InquiryId
	}
	return 0
}

func (m *EscrowRecord) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *EscrowRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type ProviderStake struct {
	Provider string     `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Amount   types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Height   uint64     `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ProviderStake) Reset()         { *m = ProviderStake{} }
func (m *ProviderStake) String() string { return proto.CompactTextString(m) }
func (*ProviderStake) ProtoMessage()    {}
func (*ProviderStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe96bcb3c73d2a9, []int{2}
}
func (m *ProviderStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderStake.Merge(m, src)
}
func (m *ProviderStake) XXX_Size() int {
	return m.Size()
}
func (m *ProviderStake) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderStake.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderStake proto.InternalMessageInfo

func (m *ProviderStake) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderStake) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *ProviderStake) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*PaymentHistory)(nil), "filespacechain.filespacechain.PaymentHistory")
	proto.RegisterType((*EscrowRecord)(nil), "filespacechain.filespacechain.EscrowRecord")
	proto.RegisterType((*ProviderStake)(nil), "filespacechain.filespacechain.ProviderStake")
}

func init() {
	proto.RegisterFile("filespacechain/filespacechain/payment.proto", fileDescriptor_3fe96bcb3c73d2a9)
}

var fileDescriptor_3fe96bcb3c73d2a9 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xb3, 0x10, 0x85, 0x66, 0x0a, 0x08, 0x2d, 0x7f, 0x14, 0x22, 0xd5, 0x8d, 0x72, 0x8a,
	0x04, 0xd8, 0x6a, 0x39, 0xc0, 0x89, 0x43, 0x10, 0x12, 0xbd, 0x45, 0xe6, 0xc6, 0xc5, 0x5a, 0xaf,
	0x97, 0x78, 0x55, 0x7b, 0xc7, 0xdd, 0x1d, 0x17, 0x2c, 0x71, 0xe0, 0x23, 0xf0, 0xb1, 0x7a, 0xac,
	0xc4, 0x85, 0x13, 0x42, 0xc9, 0x17, 0x41, 0xb6, 0xb7, 0x44, 0xed, 0x09, 0x71, 0xf3, 0x7b, 0x6f,
	0x47, 0xbf, 0x19, 0xeb, 0xc1, 0xb3, 0x4f, 0xba, 0x50, 0xae, 0x12, 0x52, 0xc9, 0x5c, 0x68, 0x13,
	0xdd, 0x90, 0x95, 0x68, 0x4a, 0x65, 0x28, 0xac, 0x2c, 0x12, 0xf2, 0x83, 0xeb, 0x69, 0x78, 0x5d,
	0x4e, 0x1f, 0xad, 0x71, 0x8d, 0xdd, 0xcb, 0xa8, 0xfd, 0xea, 0x87, 0xa6, 0x81, 0x44, 0x57, 0xa2,
	0x8b, 0x52, 0xe1, 0x54, 0x74, 0x7e, 0x94, 0x2a, 0x12, 0x47, 0x91, 0x44, 0x6d, 0xfa, 0x7c, 0xfe,
	0x83, 0xc1, 0xfd, 0x55, 0x8f, 0x79, 0xaf, 0x1d, 0xa1, 0x6d, 0xf8, 0x21, 0xec, 0x4b, 0x34, 0x64,
	0x85, 0xa4, 0x44, 0x67, 0x13, 0x36, 0x63, 0x8b, 0x61, 0x0c, 0x57, 0xd6, 0x49, 0xc6, 0xdf, 0x00,
	0x10, 0x92, 0x28, 0x92, 0x4a, 0xe8, 0x6c, 0x72, 0x6b, 0xc6, 0x16, 0xfb, 0xc7, 0x4f, 0xc3, 0x1e,
	0x14, 0xb6, 0xa0, 0xd0, 0x83, 0xc2, 0xb7, 0xa8, 0xcd, 0x72, 0x78, 0xf1, 0xeb, 0x70, 0x10, 0x8f,
	0xbb, 0x91, 0x95, 0xd0, 0x19, 0x7f, 0x0e, 0xbc, 0x10, 0x8e, 0x12, 0x7f, 0x5e, 0x92, 0x16, 0x28,
	0x4f, 0x27, 0xb7, 0x3b, 0xce, 0x83, 0x36, 0xf1, 0x0b, 0x2d, 0x5b, 0x9f, 0x1f, 0xc3, 0x63, 0x89,
	0x65, 0x55, 0x28, 0xd2, 0x68, 0x92, 0x14, 0x4d, 0xed, 0x7a, 0xf0, 0x70, 0xc6, 0x16, 0x7b, 0xf1,
	0xc3, 0x5d, 0xb8, 0x6c, 0xb3, 0x96, 0x30, 0xff, 0xc6, 0xe0, 0xee, 0x3b, 0x27, 0x2d, 0x7e, 0x8e,
	0x95, 0x44, 0x9b, 0xf1, 0x03, 0x00, 0x6d, 0xce, 0x6a, 0x6d, 0x9b, 0xdd, 0x49, 0x63, 0xef, 0x9c,
	0x64, 0xfc, 0x15, 0x8c, 0x44, 0x89, 0xb5, 0xa1, 0x7f, 0xbd, 0xc6, 0x3f, 0xe7, 0x13, 0xb8, 0x23,
	0xad, 0x12, 0x84, 0xb6, 0xdb, 0x7f, 0x1c, 0x5f, 0xc9, 0xf9, 0x57, 0xb8, 0xb7, 0xb2, 0x78, 0xae,
	0x33, 0x65, 0x3f, 0x90, 0x38, 0x55, 0x7c, 0x0a, 0x7b, 0x95, 0x37, 0xba, 0x05, 0xc6, 0xf1, 0x5f,
	0xfd, 0xff, 0xfc, 0x27, 0x30, 0xca, 0x95, 0x5e, 0xe7, 0xe4, 0x7f, 0x9f, 0x57, 0xcb, 0xf8, 0x62,
	0x13, 0xb0, 0xcb, 0x4d, 0xc0, 0x7e, 0x6f, 0x02, 0xf6, 0x7d, 0x1b, 0x0c, 0x2e, 0xb7, 0xc1, 0xe0,
	0xe7, 0x36, 0x18, 0x7c, 0x7c, 0xbd, 0xd6, 0x94, 0xd7, 0x69, 0x28, 0xb1, 0x8c, 0x72, 0x61, 0x5c,
	0x7e, 0xb6, 0x6b, 0xdd, 0x8b, 0xbe, 0x76, 0x5f, 0x6e, 0xf6, 0x90, 0x9a, 0x4a, 0xb9, 0x74, 0xd4,
	0x35, 0xe6, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x10, 0xad, 0x43, 0xb5, 0x02, 0x00,
	0x00,
}

func (m *PaymentHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletionBonusPaid {
		i--
		if m.CompletionBonusPaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastPaymentBlock != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.LastPaymentBlock))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TotalPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ContractId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EscrowRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.InquiryId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.InquiryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaymentHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractId != 0 {
		n += 1 + sovPayment(uint64(m.ContractId))
	}
	l = m.TotalPaid.Size()
	n += 1 + l + sovPayment(uint64(l))
	if m.LastPaymentBlock != 0 {
		n += 1 + sovPayment(uint64(m.LastPaymentBlock))
	}
	if m.CompletionBonusPaid {
		n += 2
	}
	return n
}

func (m *EscrowRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InquiryId != 0 {
		n += 1 + sovPayment(uint64(m.InquiryId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPayment(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *ProviderStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPayment(uint64(l))
	if m.Height != 0 {
		n += 1 + sovPayment(uint64(m.Height))
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaymentHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPaymentBlock", wireType)
			}
			m.LastPaymentBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPaymentBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionBonusPaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompletionBonusPaid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InquiryId", wireType)
			}
			m.InquiryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InquiryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
