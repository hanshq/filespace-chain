// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filespacechain/filespacechain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetFileEntryRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFileEntryRequest) Reset()         { *m = QueryGetFileEntryRequest{} }
func (m *QueryGetFileEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFileEntryRequest) ProtoMessage()    {}
func (*QueryGetFileEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{2}
}
func (m *QueryGetFileEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFileEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFileEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFileEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFileEntryRequest.Merge(m, src)
}
func (m *QueryGetFileEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFileEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFileEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFileEntryRequest proto.InternalMessageInfo

func (m *QueryGetFileEntryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFileEntryResponse struct {
	FileEntry FileEntry `protobuf:"bytes,1,opt,name=FileEntry,proto3" json:"FileEntry"`
}

func (m *QueryGetFileEntryResponse) Reset()         { *m = QueryGetFileEntryResponse{} }
func (m *QueryGetFileEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFileEntryResponse) ProtoMessage()    {}
func (*QueryGetFileEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{3}
}
func (m *QueryGetFileEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFileEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFileEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFileEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFileEntryResponse.Merge(m, src)
}
func (m *QueryGetFileEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFileEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFileEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFileEntryResponse proto.InternalMessageInfo

func (m *QueryGetFileEntryResponse) GetFileEntry() FileEntry {
	if m != nil {
		return m.FileEntry
	}
	return FileEntry{}
}

type QueryAllFileEntryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFileEntryRequest) Reset()         { *m = QueryAllFileEntryRequest{} }
func (m *QueryAllFileEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFileEntryRequest) ProtoMessage()    {}
func (*QueryAllFileEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{4}
}
func (m *QueryAllFileEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFileEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFileEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFileEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFileEntryRequest.Merge(m, src)
}
func (m *QueryAllFileEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFileEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFileEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFileEntryRequest proto.InternalMessageInfo

func (m *QueryAllFileEntryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFileEntryResponse struct {
	FileEntry  []FileEntry         `protobuf:"bytes,1,rep,name=FileEntry,proto3" json:"FileEntry"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFileEntryResponse) Reset()         { *m = QueryAllFileEntryResponse{} }
func (m *QueryAllFileEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFileEntryResponse) ProtoMessage()    {}
func (*QueryAllFileEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{5}
}
func (m *QueryAllFileEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFileEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFileEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFileEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFileEntryResponse.Merge(m, src)
}
func (m *QueryAllFileEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFileEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFileEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFileEntryResponse proto.InternalMessageInfo

func (m *QueryAllFileEntryResponse) GetFileEntry() []FileEntry {
	if m != nil {
		return m.FileEntry
	}
	return nil
}

func (m *QueryAllFileEntryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHostingInquiryRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHostingInquiryRequest) Reset()         { *m = QueryGetHostingInquiryRequest{} }
func (m *QueryGetHostingInquiryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingInquiryRequest) ProtoMessage()    {}
func (*QueryGetHostingInquiryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{6}
}
func (m *QueryGetHostingInquiryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingInquiryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingInquiryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingInquiryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingInquiryRequest.Merge(m, src)
}
func (m *QueryGetHostingInquiryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingInquiryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingInquiryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingInquiryRequest proto.InternalMessageInfo

func (m *QueryGetHostingInquiryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetHostingInquiryResponse struct {
	HostingInquiry HostingInquiry `protobuf:"bytes,1,opt,name=HostingInquiry,proto3" json:"HostingInquiry"`
}

func (m *QueryGetHostingInquiryResponse) Reset()         { *m = QueryGetHostingInquiryResponse{} }
func (m *QueryGetHostingInquiryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingInquiryResponse) ProtoMessage()    {}
func (*QueryGetHostingInquiryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{7}
}
func (m *QueryGetHostingInquiryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingInquiryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingInquiryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingInquiryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingInquiryResponse.Merge(m, src)
}
func (m *QueryGetHostingInquiryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingInquiryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingInquiryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingInquiryResponse proto.InternalMessageInfo

func (m *QueryGetHostingInquiryResponse) GetHostingInquiry() HostingInquiry {
	if m != nil {
		return m.HostingInquiry
	}
	return HostingInquiry{}
}

type QueryAllHostingInquiryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingInquiryRequest) Reset()         { *m = QueryAllHostingInquiryRequest{} }
func (m *QueryAllHostingInquiryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingInquiryRequest) ProtoMessage()    {}
func (*QueryAllHostingInquiryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{8}
}
func (m *QueryAllHostingInquiryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingInquiryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingInquiryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingInquiryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingInquiryRequest.Merge(m, src)
}
func (m *QueryAllHostingInquiryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingInquiryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingInquiryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingInquiryRequest proto.InternalMessageInfo

func (m *QueryAllHostingInquiryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHostingInquiryResponse struct {
	HostingInquiry []HostingInquiry    `protobuf:"bytes,1,rep,name=HostingInquiry,proto3" json:"HostingInquiry"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingInquiryResponse) Reset()         { *m = QueryAllHostingInquiryResponse{} }
func (m *QueryAllHostingInquiryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingInquiryResponse) ProtoMessage()    {}
func (*QueryAllHostingInquiryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{9}
}
func (m *QueryAllHostingInquiryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingInquiryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingInquiryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingInquiryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingInquiryResponse.Merge(m, src)
}
func (m *QueryAllHostingInquiryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingInquiryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingInquiryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingInquiryResponse proto.InternalMessageInfo

func (m *QueryAllHostingInquiryResponse) GetHostingInquiry() []HostingInquiry {
	if m != nil {
		return m.HostingInquiry
	}
	return nil
}

func (m *QueryAllHostingInquiryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHostingContractRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHostingContractRequest) Reset()         { *m = QueryGetHostingContractRequest{} }
func (m *QueryGetHostingContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingContractRequest) ProtoMessage()    {}
func (*QueryGetHostingContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{10}
}
func (m *QueryGetHostingContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingContractRequest.Merge(m, src)
}
func (m *QueryGetHostingContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingContractRequest proto.InternalMessageInfo

func (m *QueryGetHostingContractRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetHostingContractResponse struct {
	HostingContract HostingContract `protobuf:"bytes,1,opt,name=HostingContract,proto3" json:"HostingContract"`
}

func (m *QueryGetHostingContractResponse) Reset()         { *m = QueryGetHostingContractResponse{} }
func (m *QueryGetHostingContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingContractResponse) ProtoMessage()    {}
func (*QueryGetHostingContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{11}
}
func (m *QueryGetHostingContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingContractResponse.Merge(m, src)
}
func (m *QueryGetHostingContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingContractResponse proto.InternalMessageInfo

func (m *QueryGetHostingContractResponse) GetHostingContract() HostingContract {
	if m != nil {
		return m.HostingContract
	}
	return HostingContract{}
}

type QueryAllHostingContractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingContractRequest) Reset()         { *m = QueryAllHostingContractRequest{} }
func (m *QueryAllHostingContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingContractRequest) ProtoMessage()    {}
func (*QueryAllHostingContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{12}
}
func (m *QueryAllHostingContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingContractRequest.Merge(m, src)
}
func (m *QueryAllHostingContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingContractRequest proto.InternalMessageInfo

func (m *QueryAllHostingContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHostingContractFromRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	From       string             `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *QueryAllHostingContractFromRequest) Reset()         { *m = QueryAllHostingContractFromRequest{} }
func (m *QueryAllHostingContractFromRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingContractFromRequest) ProtoMessage()    {}
func (*QueryAllHostingContractFromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{13}
}
func (m *QueryAllHostingContractFromRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingContractFromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingContractFromRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingContractFromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingContractFromRequest.Merge(m, src)
}
func (m *QueryAllHostingContractFromRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingContractFromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingContractFromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingContractFromRequest proto.InternalMessageInfo

func (m *QueryAllHostingContractFromRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllHostingContractFromRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type QueryAllHostingContractResponse struct {
	HostingContract []HostingContract   `protobuf:"bytes,1,rep,name=HostingContract,proto3" json:"HostingContract"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingContractResponse) Reset()         { *m = QueryAllHostingContractResponse{} }
func (m *QueryAllHostingContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingContractResponse) ProtoMessage()    {}
func (*QueryAllHostingContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{14}
}
func (m *QueryAllHostingContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingContractResponse.Merge(m, src)
}
func (m *QueryAllHostingContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingContractResponse proto.InternalMessageInfo

func (m *QueryAllHostingContractResponse) GetHostingContract() []HostingContract {
	if m != nil {
		return m.HostingContract
	}
	return nil
}

func (m *QueryAllHostingContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHostingOfferRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHostingOfferRequest) Reset()         { *m = QueryGetHostingOfferRequest{} }
func (m *QueryGetHostingOfferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingOfferRequest) ProtoMessage()    {}
func (*QueryGetHostingOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{15}
}
func (m *QueryGetHostingOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingOfferRequest.Merge(m, src)
}
func (m *QueryGetHostingOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingOfferRequest proto.InternalMessageInfo

func (m *QueryGetHostingOfferRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetHostingOfferResponse struct {
	HostingOffer HostingOffer `protobuf:"bytes,1,opt,name=HostingOffer,proto3" json:"HostingOffer"`
}

func (m *QueryGetHostingOfferResponse) Reset()         { *m = QueryGetHostingOfferResponse{} }
func (m *QueryGetHostingOfferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostingOfferResponse) ProtoMessage()    {}
func (*QueryGetHostingOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{16}
}
func (m *QueryGetHostingOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostingOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostingOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostingOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostingOfferResponse.Merge(m, src)
}
func (m *QueryGetHostingOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostingOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostingOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostingOfferResponse proto.InternalMessageInfo

func (m *QueryGetHostingOfferResponse) GetHostingOffer() HostingOffer {
	if m != nil {
		return m.HostingOffer
	}
	return HostingOffer{}
}

type QueryAllHostingOfferRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingOfferRequest) Reset()         { *m = QueryAllHostingOfferRequest{} }
func (m *QueryAllHostingOfferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingOfferRequest) ProtoMessage()    {}
func (*QueryAllHostingOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{17}
}
func (m *QueryAllHostingOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingOfferRequest.Merge(m, src)
}
func (m *QueryAllHostingOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingOfferRequest proto.InternalMessageInfo

func (m *QueryAllHostingOfferRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHostingOfferResponse struct {
	HostingOffer []HostingOffer      `protobuf:"bytes,1,rep,name=HostingOffer,proto3" json:"HostingOffer"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostingOfferResponse) Reset()         { *m = QueryAllHostingOfferResponse{} }
func (m *QueryAllHostingOfferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostingOfferResponse) ProtoMessage()    {}
func (*QueryAllHostingOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{18}
}
func (m *QueryAllHostingOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostingOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostingOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostingOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostingOfferResponse.Merge(m, src)
}
func (m *QueryAllHostingOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostingOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostingOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostingOfferResponse proto.InternalMessageInfo

func (m *QueryAllHostingOfferResponse) GetHostingOffer() []HostingOffer {
	if m != nil {
		return m.HostingOffer
	}
	return nil
}

func (m *QueryAllHostingOfferResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListHostingContractFromRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListHostingContractFromRequest) Reset()         { *m = QueryListHostingContractFromRequest{} }
func (m *QueryListHostingContractFromRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListHostingContractFromRequest) ProtoMessage()    {}
func (*QueryListHostingContractFromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{19}
}
func (m *QueryListHostingContractFromRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListHostingContractFromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListHostingContractFromRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListHostingContractFromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListHostingContractFromRequest.Merge(m, src)
}
func (m *QueryListHostingContractFromRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListHostingContractFromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListHostingContractFromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListHostingContractFromRequest proto.InternalMessageInfo

func (m *QueryListHostingContractFromRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryListHostingContractFromRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListHostingContractFromResponse struct {
	HostingContract []HostingContract   `protobuf:"bytes,1,rep,name=HostingContract,proto3" json:"HostingContract"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListHostingContractFromResponse) Reset()         { *m = QueryListHostingContractFromResponse{} }
func (m *QueryListHostingContractFromResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListHostingContractFromResponse) ProtoMessage()    {}
func (*QueryListHostingContractFromResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{20}
}
func (m *QueryListHostingContractFromResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListHostingContractFromResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListHostingContractFromResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListHostingContractFromResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListHostingContractFromResponse.Merge(m, src)
}
func (m *QueryListHostingContractFromResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListHostingContractFromResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListHostingContractFromResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListHostingContractFromResponse proto.InternalMessageInfo

func (m *QueryListHostingContractFromResponse) GetHostingContract() []HostingContract {
	if m != nil {
		return m.HostingContract
	}
	return nil
}

func (m *QueryListHostingContractFromResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Payment History Queries
type QueryPaymentHistoryRequest struct {
	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (m *QueryPaymentHistoryRequest) Reset()         { *m = QueryPaymentHistoryRequest{} }
func (m *QueryPaymentHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentHistoryRequest) ProtoMessage()    {}
func (*QueryPaymentHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{21}
}
func (m *QueryPaymentHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentHistoryRequest.Merge(m, src)
}
func (m *QueryPaymentHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentHistoryRequest proto.InternalMessageInfo

func (m *QueryPaymentHistoryRequest) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

type QueryPaymentHistoryResponse struct {
	PaymentHistory PaymentHistory `protobuf:"bytes,1,opt,name=payment_history,json=paymentHistory,proto3" json:"payment_history"`
}

func (m *QueryPaymentHistoryResponse) Reset()         { *m = QueryPaymentHistoryResponse{} }
func (m *QueryPaymentHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentHistoryResponse) ProtoMessage()    {}
func (*QueryPaymentHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{22}
}
func (m *QueryPaymentHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentHistoryResponse.Merge(m, src)
}
func (m *QueryPaymentHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentHistoryResponse proto.InternalMessageInfo

func (m *QueryPaymentHistoryResponse) GetPaymentHistory() PaymentHistory {
	if m != nil {
		return m.PaymentHistory
	}
	return PaymentHistory{}
}

type QueryAllPaymentHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentHistoryRequest) Reset()         { *m = QueryAllPaymentHistoryRequest{} }
func (m *QueryAllPaymentHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentHistoryRequest) ProtoMessage()    {}
func (*QueryAllPaymentHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{23}
}
func (m *QueryAllPaymentHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentHistoryRequest.Merge(m, src)
}
func (m *QueryAllPaymentHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentHistoryRequest proto.InternalMessageInfo

func (m *QueryAllPaymentHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentHistoryResponse struct {
	PaymentHistory []PaymentHistory    `protobuf:"bytes,1,rep,name=payment_history,json=paymentHistory,proto3" json:"payment_history"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentHistoryResponse) Reset()         { *m = QueryAllPaymentHistoryResponse{} }
func (m *QueryAllPaymentHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentHistoryResponse) ProtoMessage()    {}
func (*QueryAllPaymentHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{24}
}
func (m *QueryAllPaymentHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentHistoryResponse.Merge(m, src)
}
func (m *QueryAllPaymentHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentHistoryResponse proto.InternalMessageInfo

func (m *QueryAllPaymentHistoryResponse) GetPaymentHistory() []PaymentHistory {
	if m != nil {
		return m.PaymentHistory
	}
	return nil
}

func (m *QueryAllPaymentHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Escrow Queries
type QueryEscrowRecordRequest struct {
	InquiryId uint64 `protobuf:"varint,1,opt,name=inquiry_id,json=inquiryId,proto3" json:"inquiry_id,omitempty"`
}

func (m *QueryEscrowRecordRequest) Reset()         { *m = QueryEscrowRecordRequest{} }
func (m *QueryEscrowRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowRecordRequest) ProtoMessage()    {}
func (*QueryEscrowRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{25}
}
func (m *QueryEscrowRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowRecordRequest.Merge(m, src)
}
func (m *QueryEscrowRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowRecordRequest proto.InternalMessageInfo

func (m *QueryEscrowRecordRequest) GetInquiryId() uint64 {
	if m != nil {
		return m.InquiryId
	}
	return 0
}

type QueryEscrowRecordResponse struct {
	EscrowRecord EscrowRecord `protobuf:"bytes,1,opt,name=escrow_record,json=escrowRecord,proto3" json:"escrow_record"`
}

func (m *QueryEscrowRecordResponse) Reset()         { *m = QueryEscrowRecordResponse{} }
func (m *QueryEscrowRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowRecordResponse) ProtoMessage()    {}
func (*QueryEscrowRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{26}
}
func (m *QueryEscrowRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowRecordResponse.Merge(m, src)
}
func (m *QueryEscrowRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowRecordResponse proto.InternalMessageInfo

func (m *QueryEscrowRecordResponse) GetEscrowRecord() EscrowRecord {
	if m != nil {
		return m.EscrowRecord
	}
	return EscrowRecord{}
}

type QueryAllEscrowRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEscrowRecordRequest) Reset()         { *m = QueryAllEscrowRecordRequest{} }
func (m *QueryAllEscrowRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEscrowRecordRequest) ProtoMessage()    {}
func (*QueryAllEscrowRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{27}
}
func (m *QueryAllEscrowRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEscrowRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEscrowRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEscrowRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEscrowRecordRequest.Merge(m, src)
}
func (m *QueryAllEscrowRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEscrowRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEscrowRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEscrowRecordRequest proto.InternalMessageInfo

func (m *QueryAllEscrowRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEscrowRecordResponse struct {
	EscrowRecord []EscrowRecord      `protobuf:"bytes,1,rep,name=escrow_record,json=escrowRecord,proto3" json:"escrow_record"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEscrowRecordResponse) Reset()         { *m = QueryAllEscrowRecordResponse{} }
func (m *QueryAllEscrowRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEscrowRecordResponse) ProtoMessage()    {}
func (*QueryAllEscrowRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{28}
}
func (m *QueryAllEscrowRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEscrowRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEscrowRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEscrowRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEscrowRecordResponse.Merge(m, src)
}
func (m *QueryAllEscrowRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEscrowRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEscrowRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEscrowRecordResponse proto.InternalMessageInfo

func (m *QueryAllEscrowRecordResponse) GetEscrowRecord() []EscrowRecord {
	if m != nil {
		return m.EscrowRecord
	}
	return nil
}

func (m *QueryAllEscrowRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Provider Stake Queries
type QueryProviderStakeRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryProviderStakeRequest) Reset()         { *m = QueryProviderStakeRequest{} }
func (m *QueryProviderStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderStakeRequest) ProtoMessage()    {}
func (*QueryProviderStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{29}
}
func (m *QueryProviderStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderStakeRequest.Merge(m, src)
}
func (m *QueryProviderStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderStakeRequest proto.InternalMessageInfo

func (m *QueryProviderStakeRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryProviderStakeResponse struct {
	ProviderStake ProviderStake `protobuf:"bytes,1,opt,name=provider_stake,json=providerStake,proto3" json:"provider_stake"`
}

func (m *QueryProviderStakeResponse) Reset()         { *m = QueryProviderStakeResponse{} }
func (m *QueryProviderStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderStakeResponse) ProtoMessage()    {}
func (*QueryProviderStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{30}
}
func (m *QueryProviderStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderStakeResponse.Merge(m, src)
}
func (m *QueryProviderStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderStakeResponse proto.InternalMessageInfo

func (m *QueryProviderStakeResponse) GetProviderStake() ProviderStake {
	if m != nil {
		return m.ProviderStake
	}
	return ProviderStake{}
}

type QueryAllProviderStakeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProviderStakeRequest) Reset()         { *m = QueryAllProviderStakeRequest{} }
func (m *QueryAllProviderStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProviderStakeRequest) ProtoMessage()    {}
func (*QueryAllProviderStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{31}
}
func (m *QueryAllProviderStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProviderStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProviderStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProviderStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProviderStakeRequest.Merge(m, src)
}
func (m *QueryAllProviderStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProviderStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProviderStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProviderStakeRequest proto.InternalMessageInfo

func (m *QueryAllProviderStakeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProviderStakeResponse struct {
	ProviderStake []ProviderStake     `protobuf:"bytes,1,rep,name=provider_stake,json=providerStake,proto3" json:"provider_stake"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProviderStakeResponse) Reset()         { *m = QueryAllProviderStakeResponse{} }
func (m *QueryAllProviderStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProviderStakeResponse) ProtoMessage()    {}
func (*QueryAllProviderStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd8b9ca09eda9eb, []int{32}
}
func (m *QueryAllProviderStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProviderStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProviderStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProviderStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProviderStakeResponse.Merge(m, src)
}
func (m *QueryAllProviderStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProviderStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProviderStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProviderStakeResponse proto.InternalMessageInfo

func (m *QueryAllProviderStakeResponse) GetProviderStake() []ProviderStake {
	if m != nil {
		return m.ProviderStake
	}
	return nil
}

func (m *QueryAllProviderStakeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "filespacechain.filespacechain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "filespacechain.filespacechain.QueryParamsResponse")
	proto.RegisterType((*QueryGetFileEntryRequest)(nil), "filespacechain.filespacechain.QueryGetFileEntryRequest")
	proto.RegisterType((*QueryGetFileEntryResponse)(nil), "filespacechain.filespacechain.QueryGetFileEntryResponse")
	proto.RegisterType((*QueryAllFileEntryRequest)(nil), "filespacechain.filespacechain.QueryAllFileEntryRequest")
	proto.RegisterType((*QueryAllFileEntryResponse)(nil), "filespacechain.filespacechain.QueryAllFileEntryResponse")
	proto.RegisterType((*QueryGetHostingInquiryRequest)(nil), "filespacechain.filespacechain.QueryGetHostingInquiryRequest")
	proto.RegisterType((*QueryGetHostingInquiryResponse)(nil), "filespacechain.filespacechain.QueryGetHostingInquiryResponse")
	proto.RegisterType((*QueryAllHostingInquiryRequest)(nil), "filespacechain.filespacechain.QueryAllHostingInquiryRequest")
	proto.RegisterType((*QueryAllHostingInquiryResponse)(nil), "filespacechain.filespacechain.QueryAllHostingInquiryResponse")
	proto.RegisterType((*QueryGetHostingContractRequest)(nil), "filespacechain.filespacechain.QueryGetHostingContractRequest")
	proto.RegisterType((*QueryGetHostingContractResponse)(nil), "filespacechain.filespacechain.QueryGetHostingContractResponse")
	proto.RegisterType((*QueryAllHostingContractRequest)(nil), "filespacechain.filespacechain.QueryAllHostingContractRequest")
	proto.RegisterType((*QueryAllHostingContractFromRequest)(nil), "filespacechain.filespacechain.QueryAllHostingContractFromRequest")
	proto.RegisterType((*QueryAllHostingContractResponse)(nil), "filespacechain.filespacechain.QueryAllHostingContractResponse")
	proto.RegisterType((*QueryGetHostingOfferRequest)(nil), "filespacechain.filespacechain.QueryGetHostingOfferRequest")
	proto.RegisterType((*QueryGetHostingOfferResponse)(nil), "filespacechain.filespacechain.QueryGetHostingOfferResponse")
	proto.RegisterType((*QueryAllHostingOfferRequest)(nil), "filespacechain.filespacechain.QueryAllHostingOfferRequest")
	proto.RegisterType((*QueryAllHostingOfferResponse)(nil), "filespacechain.filespacechain.QueryAllHostingOfferResponse")
	proto.RegisterType((*QueryListHostingContractFromRequest)(nil), "filespacechain.filespacechain.QueryListHostingContractFromRequest")
	proto.RegisterType((*QueryListHostingContractFromResponse)(nil), "filespacechain.filespacechain.QueryListHostingContractFromResponse")
	proto.RegisterType((*QueryPaymentHistoryRequest)(nil), "filespacechain.filespacechain.QueryPaymentHistoryRequest")
	proto.RegisterType((*QueryPaymentHistoryResponse)(nil), "filespacechain.filespacechain.QueryPaymentHistoryResponse")
	proto.RegisterType((*QueryAllPaymentHistoryRequest)(nil), "filespacechain.filespacechain.QueryAllPaymentHistoryRequest")
	proto.RegisterType((*QueryAllPaymentHistoryResponse)(nil), "filespacechain.filespacechain.QueryAllPaymentHistoryResponse")
	proto.RegisterType((*QueryEscrowRecordRequest)(nil), "filespacechain.filespacechain.QueryEscrowRecordRequest")
	proto.RegisterType((*QueryEscrowRecordResponse)(nil), "filespacechain.filespacechain.QueryEscrowRecordResponse")
	proto.RegisterType((*QueryAllEscrowRecordRequest)(nil), "filespacechain.filespacechain.QueryAllEscrowRecordRequest")
	proto.RegisterType((*QueryAllEscrowRecordResponse)(nil), "filespacechain.filespacechain.QueryAllEscrowRecordResponse")
	proto.RegisterType((*QueryProviderStakeRequest)(nil), "filespacechain.filespacechain.QueryProviderStakeRequest")
	proto.RegisterType((*QueryProviderStakeResponse)(nil), "filespacechain.filespacechain.QueryProviderStakeResponse")
	proto.RegisterType((*QueryAllProviderStakeRequest)(nil), "filespacechain.filespacechain.QueryAllProviderStakeRequest")
	proto.RegisterType((*QueryAllProviderStakeResponse)(nil), "filespacechain.filespacechain.QueryAllProviderStakeResponse")
}

func init() {
	proto.RegisterFile("filespacechain/filespacechain/query.proto", fileDescriptor_1bd8b9ca09eda9eb)
}

var fileDescriptor_1bd8b9ca09eda9eb = []byte{
	// 1431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x99, 0xdb, 0x6f, 0xe3, 0xc4,
	0x17, 0xc7, 0x3b, 0xcd, 0xfe, 0xf6, 0x47, 0x67, 0x7b, 0x61, 0x87, 0x95, 0xe8, 0x9a, 0x6d, 0x8a,
	0xcc, 0x6d, 0xe9, 0xd2, 0x98, 0xb6, 0xbb, 0xdb, 0xa6, 0x4d, 0x0b, 0x4d, 0x77, 0xbb, 0xad, 0x28,
	0xa2, 0x64, 0x05, 0x12, 0x17, 0x11, 0xb9, 0x89, 0x93, 0x58, 0x24, 0x9e, 0xd4, 0x76, 0x77, 0xa9,
	0xa2, 0x4a, 0xc0, 0x0b, 0xaf, 0x48, 0xfc, 0x0f, 0x88, 0x47, 0xc4, 0x33, 0x5a, 0x84, 0x10, 0x50,
	0xad, 0x10, 0x54, 0xdc, 0xc4, 0x13, 0x42, 0x2d, 0x12, 0xcf, 0x3c, 0xf1, 0x8a, 0x3c, 0x3e, 0x4e,
	0x6c, 0xc7, 0x4e, 0xc6, 0xae, 0x5f, 0x78, 0xa9, 0xe2, 0xf1, 0x9c, 0x33, 0xe7, 0x73, 0xce, 0xf1,
	0x78, 0xbe, 0x2e, 0x7e, 0xba, 0xa2, 0xd6, 0x15, 0xa3, 0x29, 0x97, 0x94, 0x52, 0x4d, 0x56, 0x35,
	0xc9, 0x77, 0xb9, 0xbb, 0xa7, 0xe8, 0xfb, 0x99, 0xa6, 0x4e, 0x4d, 0x4a, 0x26, 0xbc, 0xf7, 0x32,
	0xde, 0x4b, 0xe1, 0xbc, 0xdc, 0x50, 0x35, 0x2a, 0xb1, 0xbf, 0xb6, 0x85, 0x70, 0xa1, 0x4a, 0xab,
	0x94, 0xfd, 0x94, 0xac, 0x5f, 0x30, 0x7a, 0xa9, 0x4a, 0x69, 0xb5, 0xae, 0x48, 0x72, 0x53, 0x95,
	0x64, 0x4d, 0xa3, 0xa6, 0x6c, 0xaa, 0x54, 0x33, 0xe0, 0xee, 0x54, 0x89, 0x1a, 0x0d, 0x6a, 0x48,
	0x3b, 0xb2, 0xa1, 0xd8, 0xcb, 0x4b, 0x77, 0x66, 0x76, 0x14, 0x53, 0x9e, 0x91, 0x9a, 0x72, 0x55,
	0xd5, 0xd8, 0x64, 0x67, 0x6e, 0xef, 0xe0, 0x9b, 0xb2, 0x2e, 0x37, 0x1c, 0xbf, 0x99, 0xde, 0x73,
	0xad, 0xcb, 0xa2, 0xa2, 0x99, 0x0e, 0xad, 0x30, 0xd7, 0x7b, 0x7e, 0x8d, 0x1a, 0xa6, 0xaa, 0x55,
	0x8b, 0xaa, 0xb6, 0xbb, 0xa7, 0xb6, 0x8d, 0xae, 0xf2, 0x19, 0x95, 0xa8, 0x66, 0xea, 0x72, 0xc9,
	0x04, 0xab, 0x19, 0x3e, 0x2b, 0x5a, 0xa9, 0x28, 0x3a, 0x98, 0x5c, 0xe9, 0x47, 0xbe, 0xdf, 0x50,
	0x34, 0xf0, 0x2f, 0x5e, 0xc0, 0xe4, 0x65, 0x2b, 0x91, 0xdb, 0x2c, 0x1f, 0x05, 0x65, 0x77, 0x4f,
	0x31, 0x4c, 0xb1, 0x88, 0x1f, 0xf2, 0x8c, 0x1a, 0x4d, 0xaa, 0x19, 0x0a, 0xd9, 0xc0, 0x67, 0xed,
	0xbc, 0x8d, 0xa3, 0x47, 0xd1, 0xe5, 0x73, 0xb3, 0x4f, 0x64, 0x7a, 0x96, 0x3d, 0x63, 0x9b, 0xe7,
	0x87, 0x0e, 0x7f, 0x9f, 0x1c, 0xf8, 0xe4, 0xaf, 0x4f, 0xa7, 0x50, 0x01, 0xec, 0xc5, 0x29, 0x3c,
	0xce, 0x16, 0xb8, 0xa5, 0x98, 0xeb, 0x6a, 0x5d, 0xb9, 0x69, 0x25, 0x17, 0x16, 0x27, 0xa3, 0x78,
	0x50, 0x2d, 0xb3, 0x15, 0xce, 0x14, 0x06, 0xd5, 0xb2, 0xa8, 0xe2, 0x8b, 0x01, 0x73, 0x21, 0xa4,
	0x2d, 0x3c, 0xd4, 0x1e, 0x84, 0xa8, 0x2e, 0xf7, 0x89, 0xaa, 0x3d, 0x3f, 0x7f, 0xc6, 0x0a, 0xac,
	0xd0, 0x71, 0x20, 0xee, 0x40, 0x58, 0xab, 0xf5, 0x7a, 0x57, 0x58, 0xeb, 0x18, 0x77, 0x9a, 0x0c,
	0x96, 0x7a, 0x32, 0x63, 0x77, 0x64, 0xc6, 0xea, 0xc8, 0x8c, 0xfd, 0x40, 0x40, 0x47, 0x66, 0xb6,
	0xe5, 0xaa, 0x02, 0xb6, 0x05, 0x97, 0xa5, 0xf8, 0x19, 0x02, 0x1e, 0xef, 0x22, 0xc1, 0x3c, 0xa9,
	0x53, 0xf1, 0x90, 0x5b, 0x9e, 0x98, 0x07, 0x59, 0xcc, 0x4f, 0xf5, 0x8d, 0xd9, 0x0e, 0xc5, 0x13,
	0xb4, 0x84, 0x27, 0x9c, 0x1a, 0x6c, 0xd8, 0x2d, 0xb7, 0x69, 0x37, 0x77, 0x58, 0xd1, 0x0e, 0x70,
	0x3a, 0xcc, 0x00, 0x48, 0xdf, 0xc0, 0xa3, 0xde, 0x3b, 0x90, 0xd3, 0xe9, 0x3e, 0xb8, 0x5e, 0x23,
	0x60, 0xf6, 0xb9, 0x12, 0xab, 0x10, 0xef, 0x6a, 0xbd, 0x1e, 0x1c, 0x6f, 0x52, 0xd5, 0xfc, 0x06,
	0x01, 0x68, 0xc0, 0x4a, 0x3d, 0x40, 0x53, 0x09, 0x81, 0x26, 0x57, 0xe1, 0x67, 0xbb, 0x0a, 0xb6,
	0x06, 0x3b, 0x51, 0x58, 0x89, 0xdf, 0x43, 0x78, 0x32, 0xd4, 0x04, 0xd8, 0xdf, 0xc2, 0x63, 0xbe,
	0x5b, 0x90, 0xeb, 0x0c, 0x1f, 0xbc, 0x63, 0x05, 0xf4, 0x7e, 0x67, 0x62, 0xad, 0x2b, 0xfb, 0xfe,
	0xa8, 0x93, 0x2a, 0xf4, 0xbb, 0x08, 0x8b, 0x21, 0x4b, 0xad, 0xeb, 0xb4, 0x91, 0xf0, 0x72, 0x84,
	0xe0, 0x33, 0x15, 0x9d, 0x36, 0x58, 0x45, 0x87, 0x0a, 0xec, 0xb7, 0x78, 0xdf, 0x49, 0x78, 0x10,
	0x6d, 0xaf, 0x84, 0xa7, 0x12, 0x4b, 0x78, 0x72, 0xfd, 0x36, 0x8d, 0x1f, 0xf1, 0x35, 0xcf, 0x4b,
	0xd6, 0x3b, 0x2c, 0xac, 0xd9, 0xf6, 0xf0, 0xa5, 0xe0, 0xe9, 0xc0, 0xfd, 0x0a, 0x1e, 0x76, 0x8f,
	0x43, 0xe6, 0xaf, 0xf0, 0x41, 0x33, 0x13, 0x20, 0xf6, 0xb8, 0x11, 0x15, 0x88, 0xb2, 0x93, 0x71,
	0x4f, 0x94, 0x49, 0x35, 0xd7, 0x3d, 0x04, 0x78, 0x5d, 0xeb, 0x84, 0xe2, 0xa5, 0x12, 0xc0, 0x4b,
	0xae, 0x9a, 0x1f, 0x20, 0xfc, 0x18, 0x03, 0xd8, 0x52, 0x0d, 0xb3, 0xc7, 0xe3, 0x31, 0x8e, 0xff,
	0x5f, 0xd2, 0x15, 0xd9, 0xa4, 0x76, 0x85, 0x86, 0x0a, 0xce, 0xa5, 0x2f, 0x95, 0x83, 0xb1, 0x53,
	0xf9, 0x03, 0xc2, 0x8f, 0xf7, 0x8e, 0xe4, 0xbf, 0xf6, 0xa4, 0x2c, 0x63, 0x01, 0x0e, 0x63, 0xec,
	0xe0, 0xb6, 0xa1, 0x1a, 0x26, 0xed, 0xbc, 0xc8, 0x26, 0xf1, 0x39, 0xe7, 0xc8, 0x58, 0x6c, 0x3f,
	0x31, 0xd8, 0x19, 0xda, 0x2c, 0x8b, 0x2d, 0x68, 0x61, 0xbf, 0x39, 0xa4, 0xe1, 0x4d, 0x3c, 0x06,
	0x27, 0xc2, 0x62, 0xcd, 0xbe, 0xc5, 0xf9, 0x1e, 0xf6, 0xfa, 0x73, 0x5e, 0x4f, 0x4d, 0xcf, 0xa8,
	0xfb, 0x3d, 0x1c, 0x1c, 0x7e, 0x52, 0x4f, 0xd0, 0xb7, 0xae, 0xf7, 0x70, 0x14, 0xd2, 0x54, 0x42,
	0xa4, 0xc9, 0x95, 0x3b, 0x0b, 0x67, 0xd0, 0x9b, 0x46, 0x49, 0xa7, 0x77, 0x0b, 0x4a, 0x89, 0xea,
	0x65, 0x27, 0x5b, 0x13, 0x18, 0x83, 0xa8, 0xe8, 0xd4, 0x7a, 0x08, 0x46, 0x36, 0xcb, 0xa2, 0x01,
	0x27, 0x4b, 0xaf, 0x29, 0xe0, 0xbf, 0x8a, 0x47, 0x14, 0x36, 0x5e, 0xd4, 0xd9, 0x0d, 0xce, 0x2d,
	0xd2, 0xed, 0xcb, 0xd9, 0x43, 0x14, 0xd7, 0x98, 0x7b, 0x8b, 0x0c, 0x0a, 0x39, 0xa9, 0x02, 0x7f,
	0xe1, 0xda, 0x22, 0x79, 0xf9, 0x52, 0x09, 0xf0, 0x25, 0x57, 0xd8, 0x79, 0xa8, 0xce, 0xb6, 0x4e,
	0xef, 0xa8, 0x65, 0x45, 0xbf, 0x6d, 0xca, 0x6f, 0x3b, 0xa8, 0x44, 0xc0, 0x0f, 0x34, 0x61, 0x1c,
	0x76, 0xc6, 0xf6, 0xb5, 0x78, 0xd7, 0xd9, 0x00, 0xbc, 0x86, 0xc0, 0xfd, 0x1a, 0x1e, 0x75, 0x66,
	0x16, 0x0d, 0xeb, 0x0e, 0x24, 0xf9, 0x99, 0x7e, 0x5d, 0xed, 0xf6, 0x06, 0xe4, 0x23, 0x4d, 0xf7,
	0xa0, 0x58, 0xe9, 0xa4, 0x3c, 0x30, 0xe8, 0xa4, 0x6a, 0xfb, 0x15, 0x72, 0x6d, 0x13, 0xdc, 0x90,
	0xa9, 0x44, 0x20, 0x13, 0xab, 0xef, 0xec, 0xdf, 0x17, 0xf1, 0xff, 0x18, 0x05, 0xf9, 0x18, 0xe1,
	0xb3, 0xb6, 0xf6, 0x25, 0x33, 0x7d, 0x02, 0xec, 0x16, 0xdf, 0xc2, 0x6c, 0x14, 0x13, 0x3b, 0x0e,
	0xf1, 0xda, 0xfb, 0x3f, 0xfd, 0xf9, 0xd1, 0xa0, 0x44, 0xa6, 0xa5, 0x9a, 0xac, 0x19, 0xb5, 0xdd,
	0x8e, 0xe8, 0x9f, 0xee, 0xf1, 0xf9, 0x83, 0xdc, 0x43, 0x2e, 0xb9, 0x49, 0xe6, 0x79, 0x16, 0x0e,
	0x50, 0xec, 0xc2, 0x42, 0x74, 0x43, 0x88, 0x7b, 0x85, 0xc5, 0xbd, 0x40, 0xae, 0x73, 0xc6, 0xdd,
	0xf9, 0x14, 0x23, 0xb5, 0xd4, 0xf2, 0x01, 0xf9, 0x1c, 0xe1, 0xe1, 0xb6, 0xd7, 0xd5, 0x7a, 0x9d,
	0x8f, 0x21, 0x40, 0xde, 0xf3, 0x31, 0x04, 0x49, 0x76, 0x31, 0xcb, 0x18, 0xe6, 0xc8, 0x4c, 0x64,
	0x06, 0xf2, 0x23, 0xf2, 0x6b, 0x43, 0x92, 0xe3, 0xcc, 0x65, 0xa0, 0xac, 0x15, 0x96, 0x63, 0x5a,
	0x03, 0xca, 0x1a, 0x43, 0x59, 0x26, 0x4b, 0x9c, 0x28, 0xbe, 0x2f, 0x5d, 0x76, 0x4d, 0x8e, 0x10,
	0x3e, 0xef, 0xf5, 0x6f, 0x15, 0x26, 0xc7, 0x99, 0xdf, 0x53, 0x70, 0x85, 0x4a, 0xf0, 0xc8, 0x6d,
	0xe6, 0xe3, 0x22, 0xbf, 0xa2, 0xae, 0xc3, 0x22, 0x89, 0x98, 0x6a, 0x9f, 0x2e, 0x15, 0x56, 0xe2,
	0x9a, 0x03, 0xd2, 0x0d, 0x86, 0xb4, 0x42, 0x72, 0x11, 0x91, 0x9c, 0x93, 0xa1, 0x5d, 0xab, 0x9f,
	0x11, 0x26, 0xbe, 0x15, 0xac, 0x62, 0x45, 0x4c, 0x77, 0x2c, 0xb6, 0x70, 0x11, 0x2b, 0x3e, 0xc7,
	0xd8, 0xb2, 0x64, 0x3e, 0x26, 0x1b, 0xb9, 0x8f, 0xbc, 0x7a, 0x89, 0x2c, 0x46, 0xcb, 0xb6, 0x5b,
	0xe4, 0x09, 0x4b, 0xb1, 0x6c, 0x01, 0x65, 0x95, 0xa1, 0x2c, 0x91, 0x6c, 0x44, 0x14, 0xf6, 0x41,
	0xd7, 0xae, 0xd1, 0x61, 0xa7, 0xf9, 0x98, 0x6f, 0xab, 0x40, 0x8b, 0xd1, 0x32, 0x1c, 0x9d, 0x27,
	0x44, 0x88, 0x8a, 0x39, 0xc6, 0x73, 0x9d, 0x5c, 0x8d, 0xc3, 0x43, 0xfe, 0x41, 0xf8, 0xe1, 0x10,
	0x5d, 0x46, 0xf2, 0x3c, 0x61, 0xf5, 0x96, 0x97, 0xc2, 0xda, 0xa9, 0x7c, 0x00, 0xe2, 0x6d, 0x86,
	0xf8, 0x22, 0x79, 0x81, 0x13, 0xb1, 0xae, 0x1a, 0x66, 0xd1, 0xdf, 0x82, 0xc5, 0x8a, 0x4e, 0x1b,
	0x52, 0x0b, 0xd4, 0xed, 0x01, 0xf9, 0x05, 0xe1, 0x51, 0xaf, 0x8e, 0x20, 0x59, 0xbe, 0xf7, 0x7c,
	0x80, 0x6a, 0x12, 0x16, 0xe3, 0x98, 0x02, 0xde, 0x16, 0xc3, 0x5b, 0x27, 0x37, 0xb8, 0x8f, 0x0a,
	0x1e, 0xcd, 0x24, 0xb5, 0x5c, 0x72, 0xd3, 0xde, 0xec, 0xbd, 0x0b, 0x45, 0xd9, 0xec, 0x83, 0xe9,
	0x96, 0x63, 0x5a, 0xc7, 0xdc, 0xec, 0x7d, 0x80, 0xe4, 0x6b, 0x84, 0x87, 0xdd, 0xaa, 0x80, 0xef,
	0x4c, 0x11, 0xa0, 0x7d, 0xf8, 0xce, 0x14, 0x41, 0x62, 0x46, 0xcc, 0x33, 0x86, 0x1c, 0x59, 0xe4,
	0x64, 0xb0, 0x15, 0x8b, 0xd4, 0xea, 0xa8, 0xc3, 0x03, 0xf2, 0x25, 0xc2, 0x63, 0x6e, 0xe7, 0x51,
	0xf6, 0x8d, 0x20, 0x9a, 0xa5, 0x58, 0xb6, 0x31, 0x0f, 0xa8, 0x36, 0x10, 0xf9, 0x1e, 0xe1, 0x11,
	0xcf, 0x19, 0x9e, 0x70, 0xe5, 0x34, 0x48, 0xad, 0x08, 0xd9, 0x18, 0x96, 0x10, 0xfd, 0x06, 0x8b,
	0x3e, 0x4f, 0x9e, 0xe7, 0x6d, 0x29, 0x8f, 0x56, 0x91, 0x5a, 0xce, 0xf5, 0x01, 0xf9, 0x0e, 0xe1,
	0x07, 0x3d, 0x6b, 0x58, 0x55, 0xe1, 0xcd, 0x6c, 0x20, 0x56, 0x2e, 0x9e, 0x31, 0x90, 0x2d, 0x33,
	0xb2, 0x79, 0x72, 0x2d, 0x16, 0x59, 0xbe, 0x70, 0x78, 0x9c, 0x46, 0x47, 0xc7, 0x69, 0xf4, 0xc7,
	0x71, 0x1a, 0x7d, 0x78, 0x92, 0x1e, 0x38, 0x3a, 0x49, 0x0f, 0xfc, 0x76, 0x92, 0x1e, 0x78, 0x7d,
	0xa1, 0xaa, 0x9a, 0xb5, 0xbd, 0x9d, 0x4c, 0x89, 0x36, 0xc2, 0x5c, 0xbf, 0xe3, 0x77, 0x6e, 0xee,
	0x37, 0x15, 0x63, 0xe7, 0x2c, 0xfb, 0xcf, 0xe4, 0xdc, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c,
	0x61, 0x7c, 0xf1, 0x7f, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of FileEntry items.
	FileEntry(ctx context.Context, in *QueryGetFileEntryRequest, opts ...grpc.CallOption) (*QueryGetFileEntryResponse, error)
	FileEntryAll(ctx context.Context, in *QueryAllFileEntryRequest, opts ...grpc.CallOption) (*QueryAllFileEntryResponse, error)
	// Queries a list of HostingInquiry items.
	HostingInquiry(ctx context.Context, in *QueryGetHostingInquiryRequest, opts ...grpc.CallOption) (*QueryGetHostingInquiryResponse, error)
	HostingInquiryAll(ctx context.Context, in *QueryAllHostingInquiryRequest, opts ...grpc.CallOption) (*QueryAllHostingInquiryResponse, error)
	// Queries a list of HostingContract items.
	HostingContract(ctx context.Context, in *QueryGetHostingContractRequest, opts ...grpc.CallOption) (*QueryGetHostingContractResponse, error)
	HostingContractAll(ctx context.Context, in *QueryAllHostingContractRequest, opts ...grpc.CallOption) (*QueryAllHostingContractResponse, error)
	// Queries a list of HostingOffer items.
	HostingOffer(ctx context.Context, in *QueryGetHostingOfferRequest, opts ...grpc.CallOption) (*QueryGetHostingOfferResponse, error)
	HostingOfferAll(ctx context.Context, in *QueryAllHostingOfferRequest, opts ...grpc.CallOption) (*QueryAllHostingOfferResponse, error)
	// Queries a list of ListHostingContractFrom items.
	ListHostingContractFrom(ctx context.Context, in *QueryListHostingContractFromRequest, opts ...grpc.CallOption) (*QueryListHostingContractFromResponse, error)
	// Queries payment history for a specific contract.
	PaymentHistory(ctx context.Context, in *QueryPaymentHistoryRequest, opts ...grpc.CallOption) (*QueryPaymentHistoryResponse, error)
	// Queries all payment history records.
	PaymentHistoryAll(ctx context.Context, in *QueryAllPaymentHistoryRequest, opts ...grpc.CallOption) (*QueryAllPaymentHistoryResponse, error)
	// Queries escrow record for a specific inquiry.
	EscrowRecord(ctx context.Context, in *QueryEscrowRecordRequest, opts ...grpc.CallOption) (*QueryEscrowRecordResponse, error)
	// Queries all escrow records.
	EscrowRecordAll(ctx context.Context, in *QueryAllEscrowRecordRequest, opts ...grpc.CallOption) (*QueryAllEscrowRecordResponse, error)
	// Queries provider stake for a specific address.
	ProviderStake(ctx context.Context, in *QueryProviderStakeRequest, opts ...grpc.CallOption) (*QueryProviderStakeResponse, error)
	// Queries all provider stakes.
	ProviderStakeAll(ctx context.Context, in *QueryAllProviderStakeRequest, opts ...grpc.CallOption) (*QueryAllProviderStakeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileEntry(ctx context.Context, in *QueryGetFileEntryRequest, opts ...grpc.CallOption) (*QueryGetFileEntryResponse, error) {
	out := new(QueryGetFileEntryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/FileEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FileEntryAll(ctx context.Context, in *QueryAllFileEntryRequest, opts ...grpc.CallOption) (*QueryAllFileEntryResponse, error) {
	out := new(QueryAllFileEntryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/FileEntryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingInquiry(ctx context.Context, in *QueryGetHostingInquiryRequest, opts ...grpc.CallOption) (*QueryGetHostingInquiryResponse, error) {
	out := new(QueryGetHostingInquiryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingInquiryAll(ctx context.Context, in *QueryAllHostingInquiryRequest, opts ...grpc.CallOption) (*QueryAllHostingInquiryResponse, error) {
	out := new(QueryAllHostingInquiryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingInquiryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingContract(ctx context.Context, in *QueryGetHostingContractRequest, opts ...grpc.CallOption) (*QueryGetHostingContractResponse, error) {
	out := new(QueryGetHostingContractResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingContractAll(ctx context.Context, in *QueryAllHostingContractRequest, opts ...grpc.CallOption) (*QueryAllHostingContractResponse, error) {
	out := new(QueryAllHostingContractResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingContractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingOffer(ctx context.Context, in *QueryGetHostingOfferRequest, opts ...grpc.CallOption) (*QueryGetHostingOfferResponse, error) {
	out := new(QueryGetHostingOfferResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostingOfferAll(ctx context.Context, in *QueryAllHostingOfferRequest, opts ...grpc.CallOption) (*QueryAllHostingOfferResponse, error) {
	out := new(QueryAllHostingOfferResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/HostingOfferAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListHostingContractFrom(ctx context.Context, in *QueryListHostingContractFromRequest, opts ...grpc.CallOption) (*QueryListHostingContractFromResponse, error) {
	out := new(QueryListHostingContractFromResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/ListHostingContractFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentHistory(ctx context.Context, in *QueryPaymentHistoryRequest, opts ...grpc.CallOption) (*QueryPaymentHistoryResponse, error) {
	out := new(QueryPaymentHistoryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/PaymentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentHistoryAll(ctx context.Context, in *QueryAllPaymentHistoryRequest, opts ...grpc.CallOption) (*QueryAllPaymentHistoryResponse, error) {
	out := new(QueryAllPaymentHistoryResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/PaymentHistoryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowRecord(ctx context.Context, in *QueryEscrowRecordRequest, opts ...grpc.CallOption) (*QueryEscrowRecordResponse, error) {
	out := new(QueryEscrowRecordResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/EscrowRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowRecordAll(ctx context.Context, in *QueryAllEscrowRecordRequest, opts ...grpc.CallOption) (*QueryAllEscrowRecordResponse, error) {
	out := new(QueryAllEscrowRecordResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/EscrowRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderStake(ctx context.Context, in *QueryProviderStakeRequest, opts ...grpc.CallOption) (*QueryProviderStakeResponse, error) {
	out := new(QueryProviderStakeResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/ProviderStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderStakeAll(ctx context.Context, in *QueryAllProviderStakeRequest, opts ...grpc.CallOption) (*QueryAllProviderStakeResponse, error) {
	out := new(QueryAllProviderStakeResponse)
	err := c.cc.Invoke(ctx, "/filespacechain.filespacechain.Query/ProviderStakeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of FileEntry items.
	FileEntry(context.Context, *QueryGetFileEntryRequest) (*QueryGetFileEntryResponse, error)
	FileEntryAll(context.Context, *QueryAllFileEntryRequest) (*QueryAllFileEntryResponse, error)
	// Queries a list of HostingInquiry items.
	HostingInquiry(context.Context, *QueryGetHostingInquiryRequest) (*QueryGetHostingInquiryResponse, error)
	HostingInquiryAll(context.Context, *QueryAllHostingInquiryRequest) (*QueryAllHostingInquiryResponse, error)
	// Queries a list of HostingContract items.
	HostingContract(context.Context, *QueryGetHostingContractRequest) (*QueryGetHostingContractResponse, error)
	HostingContractAll(context.Context, *QueryAllHostingContractRequest) (*QueryAllHostingContractResponse, error)
	// Queries a list of HostingOffer items.
	HostingOffer(context.Context, *QueryGetHostingOfferRequest) (*QueryGetHostingOfferResponse, error)
	HostingOfferAll(context.Context, *QueryAllHostingOfferRequest) (*QueryAllHostingOfferResponse, error)
	// Queries a list of ListHostingContractFrom items.
	ListHostingContractFrom(context.Context, *QueryListHostingContractFromRequest) (*QueryListHostingContractFromResponse, error)
	// Queries payment history for a specific contract.
	PaymentHistory(context.Context, *QueryPaymentHistoryRequest) (*QueryPaymentHistoryResponse, error)
	// Queries all payment history records.
	PaymentHistoryAll(context.Context, *QueryAllPaymentHistoryRequest) (*QueryAllPaymentHistoryResponse, error)
	// Queries escrow record for a specific inquiry.
	EscrowRecord(context.Context, *QueryEscrowRecordRequest) (*QueryEscrowRecordResponse, error)
	// Queries all escrow records.
	EscrowRecordAll(context.Context, *QueryAllEscrowRecordRequest) (*QueryAllEscrowRecordResponse, error)
	// Queries provider stake for a specific address.
	ProviderStake(context.Context, *QueryProviderStakeRequest) (*QueryProviderStakeResponse, error)
	// Queries all provider stakes.
	ProviderStakeAll(context.Context, *QueryAllProviderStakeRequest) (*QueryAllProviderStakeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FileEntry(ctx context.Context, req *QueryGetFileEntryRequest) (*QueryGetFileEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileEntry not implemented")
}
func (*UnimplementedQueryServer) FileEntryAll(ctx context.Context, req *QueryAllFileEntryRequest) (*QueryAllFileEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileEntryAll not implemented")
}
func (*UnimplementedQueryServer) HostingInquiry(ctx context.Context, req *QueryGetHostingInquiryRequest) (*QueryGetHostingInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingInquiry not implemented")
}
func (*UnimplementedQueryServer) HostingInquiryAll(ctx context.Context, req *QueryAllHostingInquiryRequest) (*QueryAllHostingInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingInquiryAll not implemented")
}
func (*UnimplementedQueryServer) HostingContract(ctx context.Context, req *QueryGetHostingContractRequest) (*QueryGetHostingContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingContract not implemented")
}
func (*UnimplementedQueryServer) HostingContractAll(ctx context.Context, req *QueryAllHostingContractRequest) (*QueryAllHostingContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingContractAll not implemented")
}
func (*UnimplementedQueryServer) HostingOffer(ctx context.Context, req *QueryGetHostingOfferRequest) (*QueryGetHostingOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingOffer not implemented")
}
func (*UnimplementedQueryServer) HostingOfferAll(ctx context.Context, req *QueryAllHostingOfferRequest) (*QueryAllHostingOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostingOfferAll not implemented")
}
func (*UnimplementedQueryServer) ListHostingContractFrom(ctx context.Context, req *QueryListHostingContractFromRequest) (*QueryListHostingContractFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostingContractFrom not implemented")
}
func (*UnimplementedQueryServer) PaymentHistory(ctx context.Context, req *QueryPaymentHistoryRequest) (*QueryPaymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentHistory not implemented")
}
func (*UnimplementedQueryServer) PaymentHistoryAll(ctx context.Context, req *QueryAllPaymentHistoryRequest) (*QueryAllPaymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentHistoryAll not implemented")
}
func (*UnimplementedQueryServer) EscrowRecord(ctx context.Context, req *QueryEscrowRecordRequest) (*QueryEscrowRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowRecord not implemented")
}
func (*UnimplementedQueryServer) EscrowRecordAll(ctx context.Context, req *QueryAllEscrowRecordRequest) (*QueryAllEscrowRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowRecordAll not implemented")
}
func (*UnimplementedQueryServer) ProviderStake(ctx context.Context, req *QueryProviderStakeRequest) (*QueryProviderStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderStake not implemented")
}
func (*UnimplementedQueryServer) ProviderStakeAll(ctx context.Context, req *QueryAllProviderStakeRequest) (*QueryAllProviderStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderStakeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFileEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/FileEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileEntry(ctx, req.(*QueryGetFileEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FileEntryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFileEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FileEntryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/FileEntryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FileEntryAll(ctx, req.(*QueryAllFileEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingInquiry(ctx, req.(*QueryGetHostingInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingInquiryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingInquiryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingInquiryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingInquiryAll(ctx, req.(*QueryAllHostingInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingContract(ctx, req.(*QueryGetHostingContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingContractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingContractAll(ctx, req.(*QueryAllHostingContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostingOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingOffer(ctx, req.(*QueryGetHostingOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostingOfferAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostingOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostingOfferAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/HostingOfferAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostingOfferAll(ctx, req.(*QueryAllHostingOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListHostingContractFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListHostingContractFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListHostingContractFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/ListHostingContractFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListHostingContractFrom(ctx, req.(*QueryListHostingContractFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/PaymentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentHistory(ctx, req.(*QueryPaymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentHistoryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentHistoryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/PaymentHistoryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentHistoryAll(ctx, req.(*QueryAllPaymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/EscrowRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowRecord(ctx, req.(*QueryEscrowRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEscrowRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/EscrowRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowRecordAll(ctx, req.(*QueryAllEscrowRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/ProviderStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderStake(ctx, req.(*QueryProviderStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderStakeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProviderStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderStakeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filespacechain.filespacechain.Query/ProviderStakeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderStakeAll(ctx, req.(*QueryAllProviderStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filespacechain.filespacechain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FileEntry",
			Handler:    _Query_FileEntry_Handler,
		},
		{
			MethodName: "FileEntryAll",
			Handler:    _Query_FileEntryAll_Handler,
		},
		{
			MethodName: "HostingInquiry",
			Handler:    _Query_HostingInquiry_Handler,
		},
		{
			MethodName: "HostingInquiryAll",
			Handler:    _Query_HostingInquiryAll_Handler,
		},
		{
			MethodName: "HostingContract",
			Handler:    _Query_HostingContract_Handler,
		},
		{
			MethodName: "HostingContractAll",
			Handler:    _Query_HostingContractAll_Handler,
		},
		{
			MethodName: "HostingOffer",
			Handler:    _Query_HostingOffer_Handler,
		},
		{
			MethodName: "HostingOfferAll",
			Handler:    _Query_HostingOfferAll_Handler,
		},
		{
			MethodName: "ListHostingContractFrom",
			Handler:    _Query_ListHostingContractFrom_Handler,
		},
		{
			MethodName: "PaymentHistory",
			Handler:    _Query_PaymentHistory_Handler,
		},
		{
			MethodName: "PaymentHistoryAll",
			Handler:    _Query_PaymentHistoryAll_Handler,
		},
		{
			MethodName: "EscrowRecord",
			Handler:    _Query_EscrowRecord_Handler,
		},
		{
			MethodName: "EscrowRecordAll",
			Handler:    _Query_EscrowRecordAll_Handler,
		},
		{
			MethodName: "ProviderStake",
			Handler:    _Query_ProviderStake_Handler,
		},
		{
			MethodName: "ProviderStakeAll",
			Handler:    _Query_ProviderStakeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filespacechain/filespacechain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFileEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFileEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFileEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFileEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFileEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFileEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FileEntry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFileEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFileEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFileEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFileEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFileEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFileEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileEntry) > 0 {
		for iNdEx := len(m.FileEntry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileEntry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingInquiryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingInquiryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingInquiryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingInquiryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingInquiryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingInquiryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostingInquiry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingInquiryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingInquiryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingInquiryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingInquiryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingInquiryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingInquiryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostingInquiry) > 0 {
		for iNdEx := len(m.HostingInquiry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostingInquiry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostingContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingContractFromRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingContractFromRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingContractFromRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostingContract) > 0 {
		for iNdEx := len(m.HostingContract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostingContract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingOfferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostingOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostingOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostingOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostingOffer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingOfferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHostingOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostingOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostingOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostingOffer) > 0 {
		for iNdEx := len(m.HostingOffer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostingOffer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListHostingContractFromRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListHostingContractFromRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListHostingContractFromRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListHostingContractFromResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListHostingContractFromResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListHostingContractFromResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostingContract) > 0 {
		for iNdEx := len(m.HostingContract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostingContract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentHistory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentHistory) > 0 {
		for iNdEx := len(m.PaymentHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InquiryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InquiryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EscrowRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEscrowRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEscrowRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEscrowRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEscrowRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEscrowRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEscrowRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EscrowRecord) > 0 {
		for iNdEx := len(m.EscrowRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EscrowRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProviderStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProviderStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProviderStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProviderStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProviderStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProviderStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProviderStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderStake) > 0 {
		for iNdEx := len(m.ProviderStake) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProviderStake[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFileEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFileEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FileEntry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFileEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFileEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FileEntry) > 0 {
		for _, e := range m.FileEntry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHostingInquiryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetHostingInquiryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostingInquiry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHostingInquiryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHostingInquiryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostingInquiry) > 0 {
		for _, e := range m.HostingInquiry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHostingContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetHostingContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostingContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHostingContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHostingContractFromRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHostingContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostingContract) > 0 {
		for _, e := range m.HostingContract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHostingOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetHostingOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostingOffer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHostingOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHostingOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostingOffer) > 0 {
		for _, e := range m.HostingOffer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListHostingContractFromRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListHostingContractFromResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostingContract) > 0 {
		for _, e := range m.HostingContract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractId != 0 {
		n += 1 + sovQuery(uint64(m.ContractId))
	}
	return n
}

func (m *QueryPaymentHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentHistory.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentHistory) > 0 {
		for _, e := range m.PaymentHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InquiryId != 0 {
		n += 1 + sovQuery(uint64(m.InquiryId))
	}
	return n
}

func (m *QueryEscrowRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EscrowRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEscrowRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEscrowRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EscrowRecord) > 0 {
		for _, e := range m.EscrowRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProviderStake.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProviderStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProviderStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProviderStake) > 0 {
		for _, e := range m.ProviderStake {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFileEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFileEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFileEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFileEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFileEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFileEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FileEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFileEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFileEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFileEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFileEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFileEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFileEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileEntry = append(m.FileEntry, FileEntry{})
			if err := m.FileEntry[len(m.FileEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingInquiryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingInquiryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingInquiryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingInquiryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingInquiryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingInquiryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingInquiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostingInquiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingInquiryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingInquiryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingInquiryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingInquiryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingInquiryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingInquiryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingInquiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostingInquiry = append(m.HostingInquiry, HostingInquiry{})
			if err := m.HostingInquiry[len(m.HostingInquiry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostingContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingContractFromRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingContractFromRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingContractFromRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostingContract = append(m.HostingContract, HostingContract{})
			if err := m.HostingContract[len(m.HostingContract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostingOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostingOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostingOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingOffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostingOffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostingOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostingOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostingOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingOffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostingOffer = append(m.HostingOffer, HostingOffer{})
			if err := m.HostingOffer[len(m.HostingOffer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListHostingContractFromRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListHostingContractFromRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListHostingContractFromRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListHostingContractFromResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListHostingContractFromResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListHostingContractFromResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostingContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostingContract = append(m.HostingContract, HostingContract{})
			if err := m.HostingContract[len(m.HostingContract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentHistory = append(m.PaymentHistory, PaymentHistory{})
			if err := m.PaymentHistory[len(m.PaymentHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InquiryId", wireType)
			}
			m.InquiryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InquiryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEscrowRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEscrowRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEscrowRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEscrowRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEscrowRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEscrowRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowRecord = append(m.EscrowRecord, EscrowRecord{})
			if err := m.EscrowRecord[len(m.EscrowRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProviderStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProviderStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProviderStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProviderStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProviderStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProviderStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderStake = append(m.ProviderStake, ProviderStake{})
			if err := m.ProviderStake[len(m.ProviderStake)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
